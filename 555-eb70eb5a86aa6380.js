(()=>{"use strict";var e={},t={};function n(c){var s=t[c];if(void 0!==s)return s.exports;var a=t[c]={exports:{}};return e[c](a,a.exports,n),a.exports}n.rv=function(){return"1.2.3"},n.ruid="bundler=rspack@1.2.3";const c="cache-app",s="cache-img",a="https://pub-4211d6b528d54ed69e8ec217f023723e.r2.dev/",r=["/","/index.html"],o=new Promise(((e,t)=>{const n=indexedDB.open("cache",1);n.onupgradeneeded=e=>{const t=n.result;e.oldVersion||t.createObjectStore("config")},n.onerror=()=>{console.error("[indexeddb]",n.error),t(n.error)},n.onsuccess=t=>{e(t.target.result)}})),i=async e=>{const t=await o;return new Promise(((n,c)=>{const s=t.transaction("config","readonly");s.onerror=c;const a=s.objectStore("config").get(e);a.onsuccess=e=>{n(a.result)}}))};async function h(){return await caches.delete(c),caches.open(c).then((async e=>{const t=await fetch("/manifest.json",{cache:"no-store"}).then((e=>e.json())).catch((()=>({})));(async(e,t)=>{const n=await o;new Promise(((e,c)=>{const s=n.transaction("config","readwrite");s.onerror=c;const a=s.objectStore("config").put(t,"version");a.onsuccess=t=>{e(a.result)}}))})(0,t.VERSION),delete t.VERSION;const n=[...r,...Object.values(t)].filter(((e,t,n)=>n.indexOf(e)===t));return e.addAll(n).then((async e=>(console.log(new Date,"Cached app version",await i("version")),e)))})).then((()=>{console.log(new Date,"added all ressources to cache")}))}self.addEventListener("install",(e=>{self.skipWaiting(),e.waitUntil(Promise.resolve()),h()})),self.addEventListener("activate",(e=>self.clients.claim())),self.addEventListener("fetch",(e=>{const t=e.request.url.toString(),n=t.startsWith(a);e.respondWith(caches.match(e.request).then((async c=>{if("/"===new URL(t).pathname||"/index.html"===new URL(t).pathname){const t=await i("version"),n=await fetch("/manifest.json",{cache:"no-store"}).then((e=>e.json())).catch((()=>null));if(n&&n.VERSION!==t)return console.log(new Date,"New version detected, removing cache and getting new files"),h(),fetch(e.request)}if(c)return c;const a=await fetch(e.request);return n&&(a.ok||"opaque"===a.type)&&caches.open(s).then((e=>e.add(t))).catch(console.error),a})))})),self.onmessage=e=>{if("cache"in e.data){const t=e.data.cache;t.startsWith(a)&&caches.match(t).then((e=>{e||caches.open(s).then((e=>e.add(t))).catch(console.error)}))}"getCache"in e.data&&"img"===e.data.getCache&&caches.open(s).then((async t=>{e.source.postMessage({cache:(await t.keys()).reduce(((e,t)=>(e[t.url]=!0,e)),{})})}))}})();